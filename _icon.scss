// A button with a common icon set using "image based icon"
// and fallback using "font based icon" (Google's Material Icons -or- Font Awesome).



// development:
@use "node_modules/@heymarco/sass-class-template/index" as *;
@use "node_modules/@heymarco/sass-selector/index"       as selector;
@use "node_modules/@heymarco/icon/index"                as icon;
@forward "node_modules/@heymarco/icon/index"            show $items-n;

// production:
// @use "../../../node_modules/@heymarco/sass-class-template/index" as *;
// @use "../../../node_modules/@heymarco/sass-selector/index"       as selector;
// @use "../../../node_modules/@heymarco/icon/index"                as icon;
// @forward "../../../node_modules/@heymarco/icon/index"            show $items-n;



@forward "base"       hide $alias, style, style-basic, style-any, style-of;
@use     "base"       as base;



$alias              : "%button-icon"                        !default;
/*sub*/$class       : ".icon"                               !default;
$var-root           : base.$var-root                        !default;
$var-prefix         : "icon"                                !default;
$var-prefix-base    : base.$var-prefix                      !default;
$cssvar: make-cssvar($var-prefix, $var-prefix-base);

$pseudo-elm         : "::before"                            !default;



@include declare-cssvar($var-root) {
}



/* begin: item-specific (-specific) style */
@function normalize-class($item) { @return icon.normalize-class($item); }

@mixin _style-of($item, $include) {
    $item-n: normalize-class($item);


    //sub-class => implicitly included from base:
    // @if ($include) { @include base.style-of($item-n); }
    // @else          { @extend #{base.$alias}-#{$item-n} !optional; }

    
    @include selector.append($pseudo-elm) {
        @if ($include) { @include icon.style-of($item-n); }
        @else          { @extend #{icon.$alias}-#{$item-n} !optional; }
    }
}
@mixin style-of($item) {
    @include _style-of($item, true);
}
@each $item-n, $content in icon.$items-n {
    @include alias-of($alias, $item-n) {
        @include _style-of($item-n, false);
    }
}
/* end: item-specific (-specific) style */

/* begin: item-any (-) style */
@mixin _style-any($include) {
    @include selector.append($pseudo-elm) {
        @if ($include) { @include icon.style-any; }
        @else          { @extend #{icon.$alias}- !optional; }
    }
}
@mixin style-any {
    @include _style-any(true);
}
@include alias-any($alias) {
    @include _style-any(false);
}
/* end: item-any (-) style */



/* begin: basic (--) style */
@mixin _style-basic($include) {
    //sub-class => implicitly included from base:
    // @if ($include) { @include base.style; }
    // @else          { @extend #{base.$alias} !optional; }


    @include selector.append($pseudo-elm) {
        @if ($include) { @include icon.style-basic; }
        @else          { @extend #{icon.$alias}-- !optional; }

        content: var(#{icon.$font-cssvar}content);

        // transform: translateY(1px); // a bit tune up
    }


    /* begin: overwrite icon's variant-size */
    #{icon.$cssvar}size     : calc(var(#{base.$cssvar}font-size)    * var(#{base.$cssvar}lineheight));
    #{icon.$cssvar}size-sm  : calc(var(#{base.$cssvar}font-size-sm) * var(#{base.$cssvar}lineheight));
    #{icon.$cssvar}size-lg  : calc(var(#{base.$cssvar}font-size-lg) * var(#{base.$cssvar}lineheight));
    /* end: overwrite icon's variant-size */
}
@mixin style-basic {
    @include _style-basic(true);
}
@include alias-basic($alias) {
    @include _style-basic(false);
}
/* end: basic (--) style */



/* begin: general style */
@mixin style {
    @include style-basic;   // import basic (--) style
    @include style-any;     // import item-any (-) style
}
@include alias($alias) {
    @extend #{$alias}-- !optional; // import basic (--) style
    @extend #{$alias}-  !optional; // import item-any (-) style
}
/* end: general style */



// abstract class => no emit class
// @include class($alias, $class, base.$class);